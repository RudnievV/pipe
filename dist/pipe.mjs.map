{"version":3,"file":"pipe.mjs","sources":["../src/PipeError.ts","../src/index.ts"],"sourcesContent":["export default class PipeError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'PipeError';\n    }\n}\n","import PipeError from './PipeError';\n\ntype PipeHandlerType = () => (\n  str: string,\n  initialValueString?: string\n) => string | number | boolean | null | undefined;\ntype PipeSupportedObject = null | Record<string, string>;\ntype PipeSupportedType =\n  | null\n  | string\n  | string[]\n  | PipeSupportedObject\n  | Map<string | symbol, string>\n  | Set<string>;\n\nexport default class Pipe {\n  private argDelimiter = ':';\n  private functionDelimiter = '|';\n  private lastFilter = 'emptyStringToNull';\n\n  handlers: Record<string, PipeHandlerType> = {\n    required: () => (str: string, initialValueString?: string) => {\n      if (!str) {\n        throw new PipeError(`Required value is empty: ${initialValueString}`);\n      }\n      return str;\n    },\n    toNull: () => (str: string) => str || null,\n    toInt: () => (str: string) => (str ? +str : 0),\n    toBool: () => (str: string) =>\n      str === 'true' ? true : str === 'false' ? false : !!str,\n    emptyStringToNull: () => (str: string) => (str === '' ? null : str),\n    upper: () => (str: string) => str.toUpperCase(),\n    lower: () => (str: string) => str.toLowerCase(),\n    trim: () => (str: string) => str.trim(),\n    trimEnd: () => (str: string) => str.trimEnd(),\n    trimStart: () => (str: string) => str.trimStart(),\n    at:\n      (index = 0) =>\n      (str: string) =>\n        str.at(index),\n    startsWith:\n      (searchString: string = ' ', position?: number) =>\n      (str: string) =>\n        str.startsWith(searchString, position),\n    endsWith:\n      (searchString: string = '!', length?: number) =>\n      (str: string) =>\n        str.endsWith(searchString, length),\n    includes:\n      (searchString: string = ' ', position?: number) =>\n      (str: string) =>\n        str.includes(searchString, position),\n    indexOf:\n      (searchValue: string = ' ', fromIndex?: number) =>\n      (str: string) =>\n        str.indexOf(searchValue, fromIndex),\n    lastIndexOf:\n      (searchValue: string = ' ', fromIndex?: number) =>\n      (str: string) =>\n        str.lastIndexOf(searchValue, fromIndex),\n    repeat:\n      (count = 2) =>\n      (str: string) =>\n        str.repeat(count),\n    replace:\n      (searchValue: string = '  ', replaceValue: string = ' ') =>\n      (str: string) =>\n        str.replace(searchValue, replaceValue),\n    padStart:\n      (length = 10, fillString = '.') =>\n      (str: string) =>\n        str.padStart(length, fillString),\n    padEnd:\n      (length = 10, fillString = '.') =>\n      (str: string) =>\n        str.padEnd(length, fillString)\n  };\n\n  public addHandler(name: string, handler: PipeHandlerType) {\n    this.handlers[name] = handler;\n    return this;\n  }\n\n  public removeHandler(name: string) {\n    delete this.handlers[name];\n    return this;\n  }\n\n  public getHandler(name: string) {\n    return this.handlers[name];\n  }\n\n  public getHandlerNames() {\n    return Object.keys(this.handlers);\n  }\n\n  public setArgDelimiter(delimiter: string) {\n    this.argDelimiter = delimiter;\n    return this;\n  }\n\n  public setFunctionDelimiter(delimiter: string) {\n    this.functionDelimiter = delimiter;\n    return this;\n  }\n\n  public setLastFilter(filter: string) {\n    this.lastFilter = filter;\n    return this;\n  }\n\n  private getFunctionFromString(functionString: string) {\n    const [name, ...args] = functionString.split(this.argDelimiter);\n    const handler = this.handlers[name as keyof typeof this.handlers];\n    if (!handler) {\n      return (x: string) => x;\n    }\n    return (x: string, str?: string) => handler(...(args as []))(x, str);\n  }\n\n  private checkLastFilter() {\n    if (!this.lastFilter) {\n      return false;\n    }\n    const [filter] = this.lastFilter.split(this.argDelimiter);\n    return filter in this.handlers;\n  }\n\n  private pipes(functionStrings: string[]) {\n    if (this.checkLastFilter()) {\n      functionStrings.push(this.lastFilter);\n    }\n    return (initialValue: string, initialValueString?: string) =>\n      functionStrings.reduce((currentValue, functionString) => {\n        const fnc = this.getFunctionFromString(functionString);\n        return fnc(currentValue, initialValueString) as string;\n      }, initialValue);\n  }\n\n  public pipeString(line: string) {\n    const [initialValue, ...functionStrings] = line.split(\n      this.functionDelimiter\n    );\n    return this.pipes(functionStrings)(initialValue, initialValue);\n  }\n\n  public pipeMap(map: Map<string | symbol, string>, defaultInitialValue = '') {\n    const result = new Map();\n    map.forEach((value, key) => {\n      result.set(key, this.pipeString(value) || defaultInitialValue);\n    });\n    return result;\n  }\n\n  public pipeObject(obj: PipeSupportedObject, defaultInitialValue = '') {\n    if (!obj) {\n      return obj;\n    }\n    const result: Record<string, string> = {};\n    Object.entries(obj).forEach(([key, value]) => {\n      result[key] = this.pipeString(value) || defaultInitialValue;\n    });\n    return result;\n  }\n\n  public pipeArray(arr: string[], defaultInitialValue = ''): string[] {\n    return arr.map((value) => this.pipeString(value) || defaultInitialValue);\n  }\n\n  public pipeSet(set: Set<string>, defaultInitialValue = ''): Set<string> {\n    return new Set(this.pipeArray([...set], defaultInitialValue));\n  }\n\n  public pipe(\n    source: PipeSupportedType,\n    defaultInitialValue = ''\n  ): PipeSupportedType {\n    if (typeof source === 'string') {\n      return this.pipeString(source);\n    }\n    if (!source) {\n      return defaultInitialValue;\n    }\n    if (Array.isArray(source)) {\n      return this.pipeArray(source, defaultInitialValue);\n    }\n    if (source instanceof Map) {\n      return this.pipeMap(source, defaultInitialValue);\n    }\n    if (source instanceof Set) {\n      return this.pipeSet(source, defaultInitialValue);\n    }\n    if (typeof source === 'object') {\n      return this.pipeObject(source, defaultInitialValue);\n    }\n    return source;\n  }\n}\n"],"names":["PipeError","_Error","message","_this","call","name","_wrapNativeSuper","Error","Pipe","this","argDelimiter","functionDelimiter","lastFilter","handlers","required","str","initialValueString","toNull","toInt","toBool","emptyStringToNull","upper","toUpperCase","lower","toLowerCase","trim","trimEnd","trimStart","at","index","startsWith","searchString","position","endsWith","length","includes","indexOf","searchValue","fromIndex","lastIndexOf","repeat","count","replace","replaceValue","padStart","fillString","padEnd","_proto","prototype","addHandler","handler","removeHandler","getHandler","getHandlerNames","Object","keys","setArgDelimiter","delimiter","setFunctionDelimiter","setLastFilter","filter","getFunctionFromString","functionString","_functionString$split","split","args","slice","x","apply","checkLastFilter","pipes","functionStrings","push","initialValue","reduce","currentValue","fnc","pipeString","line","_line$split","pipeMap","map","defaultInitialValue","_this2","result","Map","forEach","value","key","set","pipeObject","obj","_this3","entries","_ref","pipeArray","arr","_this4","pipeSet","Set","concat","pipe","source","Array","isArray"],"mappings":"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"}